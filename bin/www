#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../server');
var debug = require('debug')('ejsproject:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
* Create HTTP server.
*/


var server = http.createServer(app);

var userId = {};

var io = require('socket.io')(server);

//建立一個監聽是否有使用者連進來的function
var userData = [];  //暫存目前正連線中使用者的name/id對應表


io.sockets.on('connection', function (socket) {
  console.log('有使用者連進來');
  
  //建立一個監聽“'NewUser'”的function
  socket.on('newUser', function (userName) {
    var player = new Object();
    player.id = userName;
    player.socket = socket.id;
    userData.push(player);
    socket.broadcast.emit('UserType', userName , '加入聊天!');
    socket.broadcast.emit('updateUserList', userData);
    socket.emit('updateUserList', userData);
  });

  //建立一個監聽“'addchat'”的function
  socket.on('addchat', function (data, userName) {
    var isUser = false;
    for(var key in userData){
      if(userData[key].id == userName){
        isUser = true;
        break;
      }
    }
    if(isUser == false){
      var player = new Object();
      player.id = userName;
      player.socket = socket.id;
      userData.push(player);
      socket.broadcast.emit('UserType', userName , '加入聊天!');
      socket.broadcast.emit('updateUserList', userData);
      socket.emit('updateUserList', userData);
    }
    //廣播一個事件名稱為update和data的資料(只會傳給其他使用者)
    socket.broadcast.emit('update', data, userName);
    //讓傳送過來的使用者也能收到
    socket.emit('updateMe', data, userName);
    socket.broadcast.emit('updateUserList', userData);
    socket.emit('updateUserList', userData);
  });

  socket.on('disconnect', function () {
    console.log(socket.id);
    for(var key in userData){
      if(userData[key].socket == socket.id){
        socket.broadcast.emit('UserType', userData[key].id , '離開聊天!');
        userData.splice(key, 1);
        break;
      }
    }

    socket.broadcast.emit('updateUserList', userData);
    socket.emit('updateUserList', userData);
  });

})



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
